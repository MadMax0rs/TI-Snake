    1 00:0000 -  -  -  -  ; Made with the help of https://ez80.readthedocs.io/en/latest/tutorial/intro.html
    2 00:0000 -  -  -  -  #include "D:/TI-84PlusCE/Games/MyGames/ASM/includes/ti84pce.inc"
Listing for file "D:\TI-84PlusCE\Games\MyGames\ASM\includes\ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "src\Snake.ez80"
    3 00:0000 -  -  -  -  
    4 00:0000 -  -  -  -  ; Have to be in order where something is defined BEFORE it is used
    5 00:0000 -  -  -  -  TILE_WIDTH						equ 16
    6 00:0000 -  -  -  -  TILE_HEIGHT						equ 16
    7 00:0000 -  -  -  -  LCD_BUFFER						equ $D40000
    8 00:0000 -  -  -  -  LCD_BUFFER_END					equ $D5A3FF
    9 00:0000 -  -  -  -  LCD_WIDTH						equ 320
   10 00:0000 -  -  -  -  LCD_HEIGHT						equ 240
   11 00:0000 -  -  -  -  BYTES_PER_PIXEL					equ 2
   12 00:0000 -  -  -  -  LCD_AREA						equ LCD_WIDTH*LCD_HEIGHT			; 76800
   13 00:0000 -  -  -  -  TILEMAP_WIDTH					equ LCD_WIDTH/TILE_WIDTH			; 20
   14 00:0000 -  -  -  -  TILEMAP_HEIGHT					equ LCD_HEIGHT/TILE_HEIGHT			; 15
   15 00:0000 -  -  -  -  TILEMAP_AREA					equ TILEMAP_WIDTH*TILEMAP_HEIGHT	; 300
   16 00:0000 -  -  -  -  
   17 00:0000 -  -  -  -  TICKS_ADDR   equ $F30024   ; 3-byte OS tick counter (increments at 60 Hz)
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  Facing.Up						equ %0001
   23 00:0000 -  -  -  -  Facing.Down						equ %0010
   24 00:0000 -  -  -  -  Facing.Left						equ %0100
   25 00:0000 -  -  -  -  Facing.Right					equ %1000
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  Type.Head						equ $0
   28 00:0000 -  -  -  -  Type.Body						equ $1
   29 00:0000 -  -  -  -  Type.Tail						equ $2
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; Structs
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  ; Snake Segment
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  SnakeSegment_Size				equ 4		; 1+1+1+1=4
   37 00:0000 -  -  -  -  ; Attributes
   38 00:0000 -  -  -  -  SnakeSegment.Facing				equ 0		; 1 byte
   39 00:0000 -  -  -  -  SnakeSegment.Pos				equ 1
   40 00:0000 -  -  -  -  SnakeSegment.Pos.X				equ 1		; 1 byte
   41 00:0000 -  -  -  -  SnakeSegment.Pos.Y				equ 2		; 1 byte
   42 00:0000 -  -  -  -  SnakeSegment.Type				equ 3		; 1 byte
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  BlackTile						equ $000000
   45 00:0000 -  -  -  -  Apple							equ $000200
   46 00:0000 -  -  -  -  RightToTop						equ $000400
   47 00:0000 -  -  -  -  LeftToTop						equ $000600
   48 00:0000 -  -  -  -  BottomToRight					equ $000800
   49 00:0000 -  -  -  -  BottomToLeft					equ $000A00
   50 00:0000 -  -  -  -  BodyVertical					equ $000C00
   51 00:0000 -  -  -  -  BodyHorizontal					equ $000E00
   52 00:0000 -  -  -  -  HeadUp							equ $001000
   53 00:0000 -  -  -  -  HeadDown						equ $001200
   54 00:0000 -  -  -  -  HeadLeft						equ $001400
   55 00:0000 -  -  -  -  HeadRight						equ $001600
   56 00:0000 -  -  -  -  TailUp							equ $001800
   57 00:0000 -  -  -  -  TailDown						equ $001A00
   58 00:0000 -  -  -  -  TailLeft						equ $001C00
   59 00:0000 -  -  -  -  TailRight						equ $001E00
   60 00:0000 -  -  -  -  
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  
   63 00:0000 -  -  -  -  ; Tells the assembler to assume ADL mode is on (basically 24-bit mode), which is the default
   64 00:0000 -  -  -  -  .assume ADL=1
   65 00:0000 -  -  -  -  ; Tells the assembler this program will be located at userMem-2, so any memory addresses should be relative to that
   66 00:0000 -  -  -  -  ; -2 because the program is placed at userMem, but there are 2 bytes that get removed at runtime (or smth like that, idk look at the tutorial)
   67 00:0000 -  -  -  -  .org userMem-2
   68 D1:A87F -  -  -  -  	; Equivalent to Asm84CEPrgm in TI-BASIC
   69 D1:A87F EF 7B -  -  	.db tExtTok,tAsm84CeCmp
   70 D1:A881 -  -  -  -  Start:
   71 D1:A881 -  -  -  -  	;
   72 D1:A881 -  -  -  -  	; Program code
   73 D1:A881 -  -  -  -  	;
   74 D1:A881 -  -  -  -  
   75 D1:A881 -  -  -  -  	; Reset the screen
   76 D1:A881 CD 28 08 02 	call _homeup
   77 D1:A885 CD 10 08 02 	call _ClrScrnFull
   78 D1:A889 -  -  -  -  	
   79 D1:A889 CD 1D A9 D1 	call StartTimer
   80 D1:A88D -  -  -  -  
   81 D1:A88D CD 54 A9 D1 	call GetAppVar
   82 D1:A891 CD 80 AA D1 	call ResetScreen
   83 D1:A895 CD CE A9 D1 	call DrawSnake
   84 D1:A899 -  -  -  -  
   85 D1:A899 -  -  -  -  	; Apple stuff
   86 D1:A899 CD 38 10 02 	call _RandInit
   87 D1:A89D 00 -  -  -  	nop					; Mark PlaceApple
   88 D1:A89E CD 10 AC D1 	call PlaceApple
   89 D1:A8A2 CD B6 A9 D1 	call DrawApple
   90 D1:A8A6 -  -  -  -  	
   91 D1:A8A6 -  -  -  -  	
   92 D1:A8A6 -  -  -  -  ;--------------------
   93 D1:A8A6 -  -  -  -  ; **Main Game Loop**
   94 D1:A8A6 -  -  -  -  ;--------------------
   95 D1:A8A6 -  -  -  -  Main:
   96 D1:A8A6 -  -  -  -  	; Get key press
   97 D1:A8A6 FD 21 80 00 
              D0 -  -  -  	ld iy, flags					; Magic number or else it freezes
   98 D1:A8AB CD 4C 01 02 	call _GetCSC
   99 D1:A8AF B7 -  -  -  	or a							; Check if a key was actually pressed
  100 D1:A8B0 C4 72 A9 D1 	call nz, HandleKeyPress
  101 D1:A8B4 -  -  -  -  
  102 D1:A8B4 -  -  -  -  
  103 D1:A8B4 3A B4 AD D1 	ld a, (ExitPrgm)
  104 D1:A8B8 B7 -  -  -  	or a
  105 D1:A8B9 20 55 -  -  	jr nz, Exit
  106 D1:A8BB -  -  -  -  
  107 D1:A8BB -  -  -  -  
  108 D1:A8BB -  -  -  -  	; Timer Stuff
  109 D1:A8BB CD 44 A9 D1 	call CheckTimer
  110 D1:A8BF 30 E5 -  -  	jr nc, Main						; If less than 0.5 seconds elapsed, don't do main loop
  111 D1:A8C1 -  -  -  -  
  112 D1:A8C1 -  -  -  -  	; Snake Stuff
  113 D1:A8C1 CD A3 AA D1 	call MoveSnake
  114 D1:A8C5 CD CE A9 D1 	call DrawSnake
  115 D1:A8C9 -  -  -  -  
  116 D1:A8C9 3A A9 AE D1 	ld a, (ReplaceApple)
  117 D1:A8CD B7 -  -  -  	or a
  118 D1:A8CE 28 0D -  -  	jr z, Main.DontMoveApple
  119 D1:A8D0 AF -  -  -  	xor a
  120 D1:A8D1 32 A9 AE D1 	ld (ReplaceApple), a
  121 D1:A8D5 CD 10 AC D1 	call PlaceApple
  122 D1:A8D9 CD B6 A9 D1 	call DrawApple
  123 D1:A8DD -  -  -  -  Main.DontMoveApple:
  124 D1:A8DD -  -  -  -  
  125 D1:A8DD -  -  -  -  
  126 D1:A8DD 18 C7 -  -  	jr Main
  127 D1:A8DF -  -  -  -  
  128 D1:A8DF -  -  -  -  ErrorAppVarNotFound:
  129 D1:A8DF 21 E8 AD D1 	ld hl, ErrorAppVarNotFoundStr
  130 D1:A8E3 18 18 -  -  	jr Error
  131 D1:A8E5 -  -  -  -  ErrorAppVarArchived:
  132 D1:A8E5 21 B5 AD D1 	ld hl, ErrorAppVarArchivedStr
  133 D1:A8E9 18 12 -  -  	jr Error
  134 D1:A8EB -  -  -  -  ErrorInvalidDirection:
  135 D1:A8EB 21 00 AE D1 	ld hl, ErrorInvalidDirectionStr
  136 D1:A8EF 18 0C -  -  	jr Error
  137 D1:A8F1 -  -  -  -  ErrorCantFindApplePos:
  138 D1:A8F1 21 47 AE D1 	ld hl, ErrorCantFindApplePosStr
  139 D1:A8F5 18 06 -  -  	jr Error
  140 D1:A8F7 -  -  -  -  YouDied:
  141 D1:A8F7 21 8E AE D1 	ld hl, YouDiedStr
  142 D1:A8FB 18 00 -  -  	jr Error
  143 D1:A8FD -  -  -  -  Error:
  144 D1:A8FD CD C0 07 02 	call _PutS
  145 D1:A901 CD 8C 0D 02 	call _GetKey
  146 D1:A905 3E 01 -  -  	ld a, 1
  147 D1:A907 32 B4 AD D1 	ld (ExitPrgm), a
  148 D1:A90B CD CE A9 D1 	call DrawSnake					; Render the last frame
  149 D1:A90F C9 -  -  -  	ret
  150 D1:A910 -  -  -  -  
  151 D1:A910 -  -  -  -  ;----------------------
  152 D1:A910 -  -  -  -  ; **Exit the program**
  153 D1:A910 -  -  -  -  ;----------------------
  154 D1:A910 -  -  -  -  Exit:
  155 D1:A910 -  -  -  -  	; Disable the timer
  156 D1:A910 21 00 00 00 	ld hl, 0								; Disable all timers (because its easier than disabling just timer 1)
  157 D1:A914 22 30 00 F2 	ld (TIMER_CTRL_REG), hl	
  158 D1:A918 -  -  -  -  
  159 D1:A918 -  -  -  -  	; Hand control back over to the OS
  160 D1:A918 CD 60 01 02 	call _JForceCmdNoChar
  161 D1:A91C -  -  -  -  
  162 D1:A91C -  -  -  -  	; Exits the program (Usually? idk)
  163 D1:A91C C9 -  -  -  	ret
  164 D1:A91D -  -  -  -  
  165 D1:A91D -  -  -  -  ;---------------------------------------------
  166 D1:A91D -  -  -  -  ; **Setup up a timer that waits 0.5 seconds**
  167 D1:A91D -  -  -  -  ;---------------------------------------------
  168 D1:A91D -  -  -  -  StartTimer:
  169 D1:A91D 21 00 00 00 	ld hl, 0								; Disable all timers (because its easier than disabling just timer 1)
  170 D1:A921 22 30 00 F2 	ld (TIMER_CTRL_REG), hl		
  171 D1:A925 -  -  -  -  
  172 D1:A925 21 AA 2A 00 	ld hl, 002AAAh							; 18204(0000471Ch) ticks / 36.4 KHz(I have no idea where this number comes from, it just works, ok?) equals 0.5 seconds (little-endian)
  173 D1:A929 22 00 00 F2 	ld (TIMER1_COUNTER), hl
  174 D1:A92D 22 04 00 F2 	ld (TIMER1_RESET_VAL), hl
  175 D1:A931 3E 00 -  -  	ld a, 00h
  176 D1:A933 32 03 00 F2 	ld (TIMER1_COUNTER+3), a
  177 D1:A937 32 07 00 F2 	ld (TIMER1_RESET_VAL+3), a
  178 D1:A93B -  -  -  -  
  179 D1:A93B 21 03 00 00 	ld hl, TIMER1_ON|TIMER1_CPU_CLK|TIMER1_COUNT_DOWN	; Settings for timer
  180 D1:A93F 22 30 00 F2 	ld (TIMER_CTRL_REG), hl
  181 D1:A943 C9 -  -  -  	ret
  182 D1:A944 -  -  -  -  
  183 D1:A944 -  -  -  -  ;--------------------------------------------------
  184 D1:A944 -  -  -  -  ; **Checks if the timer has hit 0**
  185 D1:A944 -  -  -  -  ; Inputs: None
  186 D1:A944 -  -  -  -  ; Outputs:
  187 D1:A944 -  -  -  -  ;	- CF - Set if timer has hit 0, Reset otherwise
  188 D1:A944 -  -  -  -  ;--------------------------------------------------
  189 D1:A944 -  -  -  -  CheckTimer:
  190 D1:A944 3A 01 00 F2 	ld a, (TIMER1_COUNTER+1)
  191 D1:A948 47 -  -  -  	ld b, a
  192 D1:A949 3A A5 AE D1 	ld a, (PreviousTime)
  193 D1:A94D B8 -  -  -  	cp b
  194 D1:A94E -  -  -  -  
  195 D1:A94E 78 -  -  -  	ld a, b									; Save current time
  196 D1:A94F 32 A5 AE D1 	ld (PreviousTime), a
  197 D1:A953 -  -  -  -  
  198 D1:A953 C9 -  -  -  	ret
  199 D1:A954 -  -  -  -  
  200 D1:A954 -  -  -  -  
  201 D1:A954 -  -  -  -  ;--------------------------------------
  202 D1:A954 -  -  -  -  ; **Gets AppVar stored in AppVarName**
  203 D1:A954 -  -  -  -  ;--------------------------------------
  204 D1:A954 -  -  -  -  GetAppVar:
  205 D1:A954 21 97 AE D1 	ld hl, AppVarName
  206 D1:A958 CD 20 03 02 	call _Mov9ToOP1
  207 D1:A95C -  -  -  -  
  208 D1:A95C CD 0C 05 02 	call _ChkFindSym
  209 D1:A960 DA DF A8 D1 	jp c, ErrorAppVarNotFound
  210 D1:A964 -  -  -  -  
  211 D1:A964 -  -  -  -  	; Check if AppVar is in RAM
  212 D1:A964 CD 98 1F 02 	call _ChkInRam
  213 D1:A968 -  -  -  -  
  214 D1:A968 C2 E5 A8 D1 	jp nz, ErrorAppVarArchived
  215 D1:A96C -  -  -  -  
  216 D1:A96C -  -  -  -  	; Pointer to AppVar Data Section stored in de
  217 D1:A96C ED 53 A2 AE 
              D1 -  -  -  	ld (AppVarPointer), de
  218 D1:A971 C9 -  -  -  	ret
  219 D1:A972 -  -  -  -  
  220 D1:A972 -  -  -  -  ;----------------------------------------------------------------
  221 D1:A972 -  -  -  -  ; **Gets the last keypress and does the corrisponding function**
  222 D1:A972 -  -  -  -  ; Params:
  223 D1:A972 -  -  -  -  ;	- A: keycode
  224 D1:A972 -  -  -  -  ;----------------------------------------------------------------
  225 D1:A972 -  -  -  -  HandleKeyPress:
  226 D1:A972 06 01 -  -  	ld b, 1
  227 D1:A974 0E 01 -  -  	ld c, 1
  228 D1:A976 -  -  -  -  
  229 D1:A976 FE 0F -  -  	cp a, skClear
  230 D1:A978 28 36 -  -  	jr z, HandleKeyPress.Clear
  231 D1:A97A FE 04 -  -  	cp a, skUp
  232 D1:A97C 28 0D -  -  	jr z, HandleKeyPress.Up
  233 D1:A97E FE 01 -  -  	cp a, skDown
  234 D1:A980 28 0F -  -  	jr z, HandleKeyPress.Down
  235 D1:A982 FE 02 -  -  	cp a, skLeft
  236 D1:A984 28 11 -  -  	jr z, HandleKeyPress.Left
  237 D1:A986 FE 03 -  -  	cp a, skRight
  238 D1:A988 28 13 -  -  	jr z, HandleKeyPress.Right
  239 D1:A98A C9 -  -  -  	ret
  240 D1:A98B -  -  -  -  
  241 D1:A98B -  -  -  -  HandleKeyPress.Up:
  242 D1:A98B 0E 01 -  -  	ld c, Facing.Up
  243 D1:A98D 06 02 -  -  	ld b, Facing.Down
  244 D1:A98F 18 12 -  -  	jr HandleKeyPress.Direction.Next
  245 D1:A991 -  -  -  -  HandleKeyPress.Down:
  246 D1:A991 0E 02 -  -  	ld c, Facing.Down
  247 D1:A993 06 01 -  -  	ld b, Facing.Up
  248 D1:A995 18 0C -  -  	jr HandleKeyPress.Direction.Next
  249 D1:A997 -  -  -  -  HandleKeyPress.Left:
  250 D1:A997 0E 04 -  -  	ld c, Facing.Left
  251 D1:A999 06 08 -  -  	ld b, Facing.Right
  252 D1:A99B 18 06 -  -  	jr HandleKeyPress.Direction.Next
  253 D1:A99D -  -  -  -  HandleKeyPress.Right:
  254 D1:A99D 0E 08 -  -  	ld c, Facing.Right
  255 D1:A99F 06 04 -  -  	ld b, Facing.Left
  256 D1:A9A1 18 00 -  -  	jr HandleKeyPress.Direction.Next
  257 D1:A9A3 -  -  -  -  
  258 D1:A9A3 -  -  -  -  HandleKeyPress.Direction.Next:
  259 D1:A9A3 3A B0 AE D1 	ld a, (SnakeFacingPrevious)
  260 D1:A9A7 B8 -  -  -  	cp b
  261 D1:A9A8 28 05 -  -  	jr z, HandleKeyPress.Direction.Done
  262 D1:A9AA -  -  -  -  
  263 D1:A9AA 79 -  -  -  	ld a, c
  264 D1:A9AB 32 AD AE D1 	ld (SnakeFacing), a
  265 D1:A9AF -  -  -  -  HandleKeyPress.Direction.Done:
  266 D1:A9AF C9 -  -  -  	ret
  267 D1:A9B0 -  -  -  -  
  268 D1:A9B0 -  -  -  -  HandleKeyPress.Clear:
  269 D1:A9B0 78 -  -  -  	ld a, b
  270 D1:A9B1 32 B4 AD D1 	ld (ExitPrgm), a
  271 D1:A9B5 C9 -  -  -  	ret
  272 D1:A9B6 -  -  -  -  
  273 D1:A9B6 -  -  -  -  
  274 D1:A9B6 -  -  -  -  ;----------------------------------------
  275 D1:A9B6 -  -  -  -  ; **Draws that Apple to the LCD_BUFFER**
  276 D1:A9B6 -  -  -  -  ;----------------------------------------
  277 D1:A9B6 -  -  -  -  DrawApple:
  278 D1:A9B6 2A A2 AE D1 	ld hl, (AppVarPointer)
  279 D1:A9BA 11 00 02 00 	ld de, Apple
  280 D1:A9BE 19 -  -  -  	add hl, de
  281 D1:A9BF 3A AA AE D1 	ld a, (ApplePos)
  282 D1:A9C3 DD 6F -  -  	ld ixl, a
  283 D1:A9C5 3A AB AE D1 	ld a, (ApplePos+1)
  284 D1:A9C9 CD B2 AC D1 	call SetTile
  285 D1:A9CD C9 -  -  -  	ret
  286 D1:A9CE -  -  -  -  
  287 D1:A9CE -  -  -  -  ;---------------------------------------
  288 D1:A9CE -  -  -  -  ; **Draws the Snake to the LCD_BUFFER**
  289 D1:A9CE -  -  -  -  ;---------------------------------------
  290 D1:A9CE -  -  -  -  DrawSnake:
  291 D1:A9CE FD 21 00 00 
              00 -  -  -  	ld iy, 0
  292 D1:A9D3 DD 21 B6 AE 
              D1 -  -  -  	ld ix, Snake
  293 D1:A9D8 ED 4B B3 AE 
              D1 -  -  -  	ld bc, (SnakeLength)
  294 D1:A9DD 03 -  -  -  	inc bc
  295 D1:A9DE -  -  -  -  DrawSegment:
  296 D1:A9DE 0B -  -  -  	dec bc
  297 D1:A9DF C5 -  -  -  	push bc											; Save bc
  298 D1:A9E0 -  -  -  -  
  299 D1:A9E0 DD 31 00 -  	ld iy, (ix)
  300 D1:A9E3 DD E5 -  -  	push ix											; Save ix
  301 D1:A9E5 FD 7E 03 -  	ld a, (iy+SnakeSegment.Type)
  302 D1:A9E8 FD 46 00 -  	ld b, (iy+SnakeSegment.Facing)
  303 D1:A9EB -  -  -  -  
  304 D1:A9EB -  -  -  -  
  305 D1:A9EB -  -  -  -  
  306 D1:A9EB 2A A2 AE D1 	ld hl, (AppVarPointer)
  307 D1:A9EF 11 00 00 00 	ld de, 0
  308 D1:A9F3 -  -  -  -  
  309 D1:A9F3 FE 00 -  -  	cp a, Type.Head
  310 D1:A9F5 28 09 -  -  	jr z, DrawSegment.Head
  311 D1:A9F7 FE 01 -  -  	cp a, Type.Body
  312 D1:A9F9 28 20 -  -  	jr z, DrawSegment.Body
  313 D1:A9FB -  -  -  -  
  314 D1:A9FB -  -  -  -  ; Otherwise, Its tail
  315 D1:A9FB -  -  -  -  	;cp a, Type.Tail
  316 D1:A9FB -  -  -  -  	;jr z, DrawSegment.Tail
  317 D1:A9FB -  -  -  -  
  318 D1:A9FB -  -  -  -  ;DrawSegment.Tail:
  319 D1:A9FB 11 00 08 00 	ld de, TailUp-HeadUp
  320 D1:A9FF 19 -  -  -  	add hl, de
  321 D1:AA00 -  -  -  -  DrawSegment.Head:
  322 D1:AA00 11 00 10 00 	ld de, HeadUp
  323 D1:AA04 19 -  -  -  	add hl, de
  324 D1:AA05 -  -  -  -  
  325 D1:AA05 78 -  -  -  	ld a, b
  326 D1:AA06 -  -  -  -  ; Decide the direction
  327 D1:AA06 -  -  -  -  	; Get the size of 1 tile in the AppVar
  328 D1:AA06 01 00 02 00 	ld bc, TILE_WIDTH*TILE_HEIGHT*BYTES_PER_PIXEL
  329 D1:AA0A -  -  -  -  
  330 D1:AA0A FE 01 -  -  	cp a, Facing.Up
  331 D1:AA0C 28 0B -  -  	jr z, DrawSegment.Head_Tail.Up
  332 D1:AA0E FE 02 -  -  	cp a, Facing.Down
  333 D1:AA10 28 06 -  -  	jr z, DrawSegment.Head_Tail.Down
  334 D1:AA12 FE 04 -  -  	cp a, Facing.Left
  335 D1:AA14 28 01 -  -  	jr z, DrawSegment.Head_Tail.Left
  336 D1:AA16 -  -  -  -  
  337 D1:AA16 -  -  -  -  ; Otherwse, its right		; If Right, it needs to add 3
  338 D1:AA16 09 -  -  -  	add hl, bc
  339 D1:AA17 -  -  -  -  DrawSegment.Head_Tail.Left:	; If Left, it needs to add 2
  340 D1:AA17 09 -  -  -  	add hl, bc
  341 D1:AA18 -  -  -  -  DrawSegment.Head_Tail.Down:	; If down, it needs to add 1
  342 D1:AA18 09 -  -  -  	add hl, bc
  343 D1:AA19 -  -  -  -  DrawSegment.Head_Tail.Up:	; If up, its already there
  344 D1:AA19 18 43 -  -  	jr DrawSegment.Done
  345 D1:AA1B -  -  -  -  
  346 D1:AA1B -  -  -  -  DrawSegment.Body:
  347 D1:AA1B DD E1 -  -  	pop ix
  348 D1:AA1D DD E5 -  -  	push ix											; Get ix and immediately save it again
  349 D1:AA1F -  -  -  -  
  350 D1:AA1F -  -  -  -  	; Get previous segment
  351 D1:AA1F FD E5 -  -  	push iy
  352 D1:AA21 DD 31 FD -  	ld iy, (ix-3)
  353 D1:AA24 FD 7E 00 -  	ld a, (iy+SnakeSegment.Facing)
  354 D1:AA27 FD E1 -  -  	pop iy
  355 D1:AA29 -  -  -  -  	; a = Previous segment direction
  356 D1:AA29 -  -  -  -  	; b = Current segment direction
  357 D1:AA29 B8 -  -  -  	cp a, b
  358 D1:AA2A F5 -  -  -  	push af											; Save the flags
  359 D1:AA2B -  -  -  -  
  360 D1:AA2B -  -  -  -  	; Move the previous segment direction into the high-order 4-bits of a
  361 D1:AA2B CB 27 -  -  	sla a
  362 D1:AA2D CB 27 -  -  	sla a
  363 D1:AA2F CB 27 -  -  	sla a
  364 D1:AA31 CB 27 -  -  	sla a
  365 D1:AA33 B0 -  -  -  	or b
  366 D1:AA34 -  -  -  -  
  367 D1:AA34 4F -  -  -  	ld c, a
  368 D1:AA35 F1 -  -  -  	pop af											; Restore the flags
  369 D1:AA36 79 -  -  -  	ld a, c
  370 D1:AA37 -  -  -  -  
  371 D1:AA37 -  -  -  -  	; Do this so that a is still shifted and or-ed
  372 D1:AA37 28 0A -  -  	jr z, DrawSegment.Equal
  373 D1:AA39 -  -  -  -  
  374 D1:AA39 ED 64 21 -  	tst a, Facing.Up|(Facing.Down<<4)
  375 D1:AA3C 20 0B -  -  	jr nz, DrawSegment.Body.Up
  376 D1:AA3E ED 64 12 -  	tst a, Facing.Down|(Facing.Up<<4)
  377 D1:AA41 20 0C -  -  	jr nz, DrawSegment.Body.Down
  378 D1:AA43 -  -  -  -  
  379 D1:AA43 -  -  -  -  DrawSegment.Equal:
  380 D1:AA43 11 00 0C 00 	ld de, BodyVertical
  381 D1:AA47 18 0A -  -  	jr DrawSegment.Body.Next
  382 D1:AA49 -  -  -  -  
  383 D1:AA49 -  -  -  -  DrawSegment.Body.Up:
  384 D1:AA49 11 00 04 00 	ld de, RightToTop
  385 D1:AA4D 18 04 -  -  	jr DrawSegment.Body.Next
  386 D1:AA4F -  -  -  -  
  387 D1:AA4F -  -  -  -  DrawSegment.Body.Down:
  388 D1:AA4F 11 00 08 00 	ld de, BottomToRight
  389 D1:AA53 -  -  -  -  
  390 D1:AA53 -  -  -  -  DrawSegment.Body.Next:
  391 D1:AA53 19 -  -  -  	add hl, de
  392 D1:AA54 -  -  -  -  
  393 D1:AA54 ED 64 84 -  	tst a, Facing.Left|(Facing.Right<<4)
  394 D1:AA57 28 05 -  -  	jr z, DrawSegment.Done
  395 D1:AA59 -  -  -  -  
  396 D1:AA59 11 00 02 00 	ld de, TILE_WIDTH*TILE_HEIGHT*BYTES_PER_PIXEL
  397 D1:AA5D 19 -  -  -  	add hl, de
  398 D1:AA5E -  -  -  -  DrawSegment.Done:
  399 D1:AA5E FD 7E 01 -  	ld a, (iy+SnakeSegment.Pos.X)
  400 D1:AA61 DD 6F -  -  	ld ixl, a
  401 D1:AA63 FD 7E 02 -  	ld a, (iy+SnakeSegment.Pos.Y)
  402 D1:AA66 CD B2 AC D1 	call SetTile
  403 D1:AA6A -  -  -  -  	
  404 D1:AA6A DD E1 -  -  	pop ix											; Restore ix
  405 D1:AA6C -  -  -  -  	; Increment ix to the next pointer for the cycle after this one
  406 D1:AA6C 01 03 00 00 	ld bc, 3
  407 D1:AA70 DD 09 -  -  	add ix, bc
  408 D1:AA72 C1 -  -  -  	pop bc											; Restore bc
  409 D1:AA73 -  -  -  -  	; If bc == 0, return
  410 D1:AA73 78 -  -  -  	ld a, b
  411 D1:AA74 B7 -  -  -  	or a
  412 D1:AA75 C2 DE A9 D1 	jp nz, DrawSegment
  413 D1:AA79 79 -  -  -  	ld a, c
  414 D1:AA7A B7 -  -  -  	or a
  415 D1:AA7B C2 DE A9 D1 	jp nz, DrawSegment
  416 D1:AA7F C9 -  -  -  	ret
  417 D1:AA80 -  -  -  -  
  418 D1:AA80 -  -  -  -  
  419 D1:AA80 -  -  -  -  
  420 D1:AA80 -  -  -  -  
  421 D1:AA80 -  -  -  -  ;------------------------------------
  422 D1:AA80 -  -  -  -  ; **Resets the screen to all black**
  423 D1:AA80 -  -  -  -  ;------------------------------------
  424 D1:AA80 -  -  -  -  ResetScreen:
  425 D1:AA80 21 00 00 D4 	ld hl, LCD_BUFFER
  426 D1:AA84 01 00 58 02 	ld bc, LCD_AREA*BYTES_PER_PIXEL
  427 D1:AA88 -  -  -  -  RestScreen.clearLoop:
  428 D1:AA88 36 00 -  -  	ld (hl), 0
  429 D1:AA8A 23 -  -  -  	inc hl
  430 D1:AA8B 0B -  -  -  	dec bc
  431 D1:AA8C -  -  -  -  	; Check of bc is zero
  432 D1:AA8C ED 43 EA B6 
              D1 -  -  -  	ld (Data), bc										; bc is 24-bit so I have to load it into memory, then load each bit seperately and or them all together
  433 D1:AA91 3A EC B6 D1 	ld a, (Data+2)
  434 D1:AA95 B0 -  -  -  	or b
  435 D1:AA96 B1 -  -  -  	or c
  436 D1:AA97 20 EF -  -  	jr nz, RestScreen.clearLoop
  437 D1:AA99 CD 9E AA D1 	call BlitScreen
  438 D1:AA9D C9 -  -  -  	ret
  439 D1:AA9E -  -  -  -  
  440 D1:AA9E -  -  -  -  ;
  441 D1:AA9E -  -  -  -  ; Blits the frame buffer to the screen
  442 D1:AA9E -  -  -  -  ;
  443 D1:AA9E -  -  -  -  BlitScreen:
  444 D1:AA9E CD 44 45 00 	call $4544    ; _BlitLCD BCALL address for OS 5.8.x
  445 D1:AAA2 C9 -  -  -  	ret
  446 D1:AAA3 -  -  -  -  
  447 D1:AAA3 -  -  -  -  
  448 D1:AAA3 -  -  -  -  
  449 D1:AAA3 -  -  -  -  ; TODO: Finish this function
  450 D1:AAA3 -  -  -  -  ;----------------------------------
  451 D1:AAA3 -  -  -  -  ;**Moves the snake 1 Tile forward**
  452 D1:AAA3 -  -  -  -  ;----------------------------------
  453 D1:AAA3 -  -  -  -  MoveSnake:
  454 D1:AAA3 -  -  -  -  	; Move the current direction into the previous direction
  455 D1:AAA3 3A AD AE D1 	ld a, (SnakeFacing)
  456 D1:AAA7 32 B0 AE D1 	ld (SnakeFacingPrevious), a
  457 D1:AAAB -  -  -  -  
  458 D1:AAAB -  -  -  -  	; Set old tail to a black tile
  459 D1:AAAB 2A A2 AE D1 	ld hl, (AppVarPointer)
  460 D1:AAAF 01 00 00 00 	ld bc, BlackTile
  461 D1:AAB3 09 -  -  -  	add hl, bc
  462 D1:AAB4 FD 2A B6 AE 
              D1 -  -  -  	ld iy, (Snake)								; typeof(iy) = SnakeSegment*
  463 D1:AAB9 FD 46 01 -  	ld b, (iy+SnakeSegment.Pos.X)				; typeof(iy) = SnakeSegment.X
  464 D1:AABC DD 68 -  -  	ld ixl, b
  465 D1:AABE FD 7E 02 -  	ld a, (iy+SnakeSegment.Pos.Y)				; typeof(iy) = SnakeSegment.Y
  466 D1:AAC1 CD B2 AC D1 	call SetTile
  467 D1:AAC5 -  -  -  -  
  468 D1:AAC5 -  -  -  -  
  469 D1:AAC5 -  -  -  -  	; Get head pointer
  470 D1:AAC5 ED 4B B3 AE 
              D1 -  -  -  	ld bc, (SnakeLength)
  471 D1:AACA 0B -  -  -  	dec bc										; Otherwise off-by-one error, reads 3 bytes farther than its supposed to
  472 D1:AACB 3E 03 -  -  	ld a, 3										; Size of a pointer/mem addr
  473 D1:AACD CD EF AC D1 	call mul
  474 D1:AAD1 22 EA B6 D1 	ld (Data), hl								; Save mul result
  475 D1:AAD5 01 B6 AE D1 	ld bc, Snake
  476 D1:AAD9 09 -  -  -  	add hl, bc									; hl = head SnakeSegment**
  477 D1:AADA 22 ED B6 D1 	ld (Data+3), hl								; Save head SnakeSegment**
  478 D1:AADE -  -  -  -  
  479 D1:AADE -  -  -  -  	; ResetSegments
  480 D1:AADE ED 27 -  -  	ld hl, (hl)
  481 D1:AAE0 11 E6 B6 D1 	ld de, SegmentsEnd
  482 D1:AAE4 CD 3C 01 02 	call _CPHLDE
  483 D1:AAE8 20 04 -  -  	jr nz, MoveSnake.KeepSegments
  484 D1:AAEA CD 74 AC D1 	call ResetSegments
  485 D1:AAEE -  -  -  -  MoveSnake.KeepSegments:
  486 D1:AAEE -  -  -  -  
  487 D1:AAEE 2A ED B6 D1 	ld hl, (Data+3)
  488 D1:AAF2 -  -  -  -  	; Set old head direction
  489 D1:AAF2 ED 37 -  -  	ld ix, (hl)									; ix = head SnakeSegment*
  490 D1:AAF4 3A AD AE D1 	ld a, (SnakeFacing)
  491 D1:AAF8 DD 77 00 -  	ld (ix+SnakeSegment.Facing), a				; Set the old head to be facing the right direction (do this before the copy)
  492 D1:AAFB -  -  -  -  	
  493 D1:AAFB -  -  -  -  	; Create new head
  494 D1:AAFB ED 17 -  -  	ld de, (hl)									; Copy head SnakeSegment* into de
  495 D1:AAFD ED 27 -  -  	ld hl, (hl)									; Copy head SnakeSegment* into hl
  496 D1:AAFF 01 04 00 00 	ld bc, SnakeSegment_Size
  497 D1:AB03 09 -  -  -  	add hl, bc									; Add offset
  498 D1:AB04 EB -  -  -  	ex de, hl									; Can't do "add de, bc"
  499 D1:AB05 ED 53 F0 B6 
              D1 -  -  -  	ld (Data+6), de								; Save the new pointer
  500 D1:AB0A ED B0 -  -  	ldir										; Move current head to next segment
  501 D1:AB0C -  -  -  -  
  502 D1:AB0C -  -  -  -  	; Set old head to be a body tile
  503 D1:AB0C DD 36 03 01 	ld (ix+SnakeSegment.Type), Type.Body		; Set the old head to be a body
  504 D1:AB10 -  -  -  -  
  505 D1:AB10 -  -  -  -  
  506 D1:AB10 -  -  -  -  	; Move the new head in the correct direction
  507 D1:AB10 DD 2A F0 B6 
              D1 -  -  -  	ld ix, (Data+6)								; Load the new pointer
  508 D1:AB15 11 00 00 00 	ld de, 0
  509 D1:AB19 DD 7E 00 -  	ld a, (ix+SnakeSegment.Facing)
  510 D1:AB1C FE 01 -  -  	cp Facing.Up
  511 D1:AB1E 28 10 -  -  	jr z, MoveSnake.Up
  512 D1:AB20 FE 02 -  -  	cp Facing.Down
  513 D1:AB22 28 1A -  -  	jr z, MoveSnake.Down
  514 D1:AB24 FE 04 -  -  	cp Facing.Left
  515 D1:AB26 28 28 -  -  	jr z, MoveSnake.Left
  516 D1:AB28 FE 08 -  -  	cp Facing.Right
  517 D1:AB2A 28 32 -  -  	jr z, MoveSnake.Right
  518 D1:AB2C C3 EB A8 D1 	jp ErrorInvalidDirection
  519 D1:AB30 -  -  -  -  MoveSnake.Up:
  520 D1:AB30 DD 7E 02 -  	ld a, (ix+SnakeSegment.Pos.Y)
  521 D1:AB33 0E 00 -  -  	ld c, 00h
  522 D1:AB35 B9 -  -  -  	cp c
  523 D1:AB36 CA F7 A8 D1 	jp z, YouDied
  524 D1:AB3A 06 FF -  -  	ld b, 0FFh
  525 D1:AB3C 18 0C -  -  	jr MoveSnake.Vertical
  526 D1:AB3E -  -  -  -  MoveSnake.Down:
  527 D1:AB3E DD 7E 02 -  	ld a, (ix+SnakeSegment.Pos.Y)
  528 D1:AB41 0E 0E -  -  	ld c, TILEMAP_HEIGHT-1							; -1 because coords are 0-based
  529 D1:AB43 B9 -  -  -  	cp c
  530 D1:AB44 CA F7 A8 D1 	jp z, YouDied
  531 D1:AB48 06 01 -  -  	ld b, 1h
  532 D1:AB4A -  -  -  -  MoveSnake.Vertical:
  533 D1:AB4A 80 -  -  -  	add a, b
  534 D1:AB4B DD 77 02 -  	ld (ix+SnakeSegment.Pos.Y), a
  535 D1:AB4E 18 1E -  -  	jr MoveSnake.DoneMoveHead
  536 D1:AB50 -  -  -  -  
  537 D1:AB50 -  -  -  -  MoveSnake.Left:
  538 D1:AB50 DD 7E 01 -  	ld a, (ix+SnakeSegment.Pos.X)
  539 D1:AB53 0E 00 -  -  	ld c, 00h
  540 D1:AB55 B9 -  -  -  	cp c
  541 D1:AB56 CA F7 A8 D1 	jp z, YouDied
  542 D1:AB5A 06 FF -  -  	ld b, 0FFh
  543 D1:AB5C 18 0C -  -  	jr MoveSnake.Horizontal
  544 D1:AB5E -  -  -  -  MoveSnake.Right:
  545 D1:AB5E DD 7E 01 -  	ld a, (ix+SnakeSegment.Pos.X)
  546 D1:AB61 0E 13 -  -  	ld c, TILEMAP_WIDTH-1							; -1 because coords are 0-based
  547 D1:AB63 B9 -  -  -  	cp c
  548 D1:AB64 CA F7 A8 D1 	jp z, YouDied
  549 D1:AB68 06 01 -  -  	ld b, 1h
  550 D1:AB6A -  -  -  -  MoveSnake.Horizontal:
  551 D1:AB6A 80 -  -  -  	add a, b
  552 D1:AB6B DD 77 01 -  	ld (ix+SnakeSegment.Pos.X), a
  553 D1:AB6E -  -  -  -  
  554 D1:AB6E -  -  -  -  MoveSnake.DoneMoveHead:
  555 D1:AB6E -  -  -  -  
  556 D1:AB6E -  -  -  -  	; Check if there's an apple
  557 D1:AB6E FD 2A F0 B6 
              D1 -  -  -  	ld iy, (Data+6)								; typeof(iy) = SnakeSegment*
  558 D1:AB73 FD 56 02 -  	ld d, (iy+SnakeSegment.Pos.Y)
  559 D1:AB76 FD 5E 01 -  	ld e, (iy+SnakeSegment.Pos.X)
  560 D1:AB79 -  -  -  -  
  561 D1:AB79 2A AA AE D1 	ld hl, (ApplePos)
  562 D1:AB7D CD 3C 01 02 	call _CpHLDE
  563 D1:AB81 28 20 -  -  	jr z, MoveSnake.Apple
  564 D1:AB83 -  -  -  -  
  565 D1:AB83 -  -  -  -  ; No Apple
  566 D1:AB83 -  -  -  -  	; Shift all of the pointers up by 1
  567 D1:AB83 21 B6 AE D1 	ld hl, Snake
  568 D1:AB87 23 -  -  -  	inc hl
  569 D1:AB88 23 -  -  -  	inc hl
  570 D1:AB89 23 -  -  -  	inc hl
  571 D1:AB8A 11 B6 AE D1 	ld de, Snake
  572 D1:AB8E ED 4B EA B6 
              D1 -  -  -  	ld bc, (Data)								; Get mul result
  573 D1:AB93 ED B0 -  -  	ldir
  574 D1:AB95 -  -  -  -  	
  575 D1:AB95 -  -  -  -  	; Set new head pointer
  576 D1:AB95 2A F0 B6 D1 	ld hl, (Data+6)								; Load the new pointer
  577 D1:AB99 DD 2A ED B6 
              D1 -  -  -  	ld ix, (Data+3)								; Copy head SnakeSegment** into ix
  578 D1:AB9E DD 2F 00 -  	ld (ix), hl									; Set the new pointer
  579 D1:ABA1 -  -  -  -  
  580 D1:ABA1 18 1B -  -  	jr MoveSnake.AppleDone
  581 D1:ABA3 -  -  -  -  MoveSnake.Apple:
  582 D1:ABA3 -  -  -  -  	; Randomize new apple position
  583 D1:ABA3 3E 01 -  -  	ld a, 1
  584 D1:ABA5 32 A9 AE D1 	ld (ReplaceApple), a
  585 D1:ABA9 -  -  -  -  
  586 D1:ABA9 -  -  -  -  	; Set new head pointer
  587 D1:ABA9 2A F0 B6 D1 	ld hl, (Data+6)								; Load the new pointer
  588 D1:ABAD DD 2A ED B6 
              D1 -  -  -  	ld ix, (Data+3)								; Copy head SnakeSegment** into ix
  589 D1:ABB2 DD 2F 03 -  	ld (ix+3), hl								; Set the new pointer
  590 D1:ABB5 -  -  -  -  
  591 D1:ABB5 -  -  -  -  	; Increase length
  592 D1:ABB5 2A B3 AE D1 	ld hl, (SnakeLength)
  593 D1:ABB9 23 -  -  -  	inc hl
  594 D1:ABBA 22 B3 AE D1 	ld (SnakeLength), hl
  595 D1:ABBE -  -  -  -  MoveSnake.AppleDone:
  596 D1:ABBE -  -  -  -  
  597 D1:ABBE -  -  -  -  	; Set up to check overlap
  598 D1:ABBE FD 2A F0 B6 
              D1 -  -  -  	ld iy, (Data+6)								; typeof(iy) = SnakeSegment*
  599 D1:ABC3 11 00 00 00 	ld de, 0									; de is 24-bit, so make sure the high-order byte is 0
  600 D1:ABC7 FD 56 01 -  	ld d, (iy+SnakeSegment.Pos.X)
  601 D1:ABCA FD 5E 02 -  	ld e, (iy+SnakeSegment.Pos.Y)
  602 D1:ABCD DD 2A B6 AE 
              D1 -  -  -  	ld ix, (Snake)								; typeof(ix) = SnakeSegment*
  603 D1:ABD2 -  -  -  -  
  604 D1:ABD2 -  -  -  -  	; Don't count the head
  605 D1:ABD2 FD 2B -  -  	dec iy
  606 D1:ABD4 FD 2B -  -  	dec iy
  607 D1:ABD6 FD 2B -  -  	dec iy
  608 D1:ABD8 FD 2B -  -  	dec iy
  609 D1:ABDA FD 22 F0 B6 
              D1 -  -  -  	ld (Data+6), iy
  610 D1:ABDF -  -  -  -  MoveSnake.CheckOverlapping:
  611 D1:ABDF 21 00 00 00 	ld hl, 0
  612 D1:ABE3 -  -  -  -  
  613 D1:ABE3 DD 66 01 -  	ld h, (ix+SnakeSegment.Pos.X)
  614 D1:ABE6 DD 6E 02 -  	ld l, (ix+SnakeSegment.Pos.Y)
  615 D1:ABE9 -  -  -  -   
  616 D1:ABE9 -  -  -  -  
  617 D1:ABE9 CD 3C 01 02 	call _CpHLDE
  618 D1:ABED CA F7 A8 D1 	jp z, YouDied								; Check if head overlapping with segment
  619 D1:ABF1 DD 23 -  -  	inc ix										; Move to next segment pointer
  620 D1:ABF3 DD 23 -  -  	inc ix
  621 D1:ABF5 DD 23 -  -  	inc ix
  622 D1:ABF7 DD 23 -  -  	inc ix
  623 D1:ABF9 -  -  -  -  
  624 D1:ABF9 DD E5 -  -  	push ix										; ld bc, ix
  625 D1:ABFB C1 -  -  -  	pop bc
  626 D1:ABFC 2A F0 B6 D1 	ld hl, (Data+6)								; Load the pointer to the segment before the head
  627 D1:AC00 37 -  -  -  	scf											; Reset carry
  628 D1:AC01 3F -  -  -  	ccf
  629 D1:AC02 ED 42 -  -  	sbc hl, bc									; cp hl, bc
  630 D1:AC04 20 D9 -  -  	jr nz, MoveSnake.CheckOverlapping			; If current segment is not the last body segment, loop again
  631 D1:AC06 -  -  -  -  
  632 D1:AC06 -  -  -  -  
  633 D1:AC06 -  -  -  -  	; Set the new tail to be a tail
  634 D1:AC06 DD 2A B6 AE 
              D1 -  -  -  	ld ix, (Snake)
  635 D1:AC0B DD 36 03 02 	ld (ix+SnakeSegment.Type), Type.Tail
  636 D1:AC0F -  -  -  -  
  637 D1:AC0F -  -  -  -  
  638 D1:AC0F C9 -  -  -  	ret
  639 D1:AC10 -  -  -  -  
  640 D1:AC10 -  -  -  -  
  641 D1:AC10 -  -  -  -  ; TODO: Finish this function
  642 D1:AC10 -  -  -  -  ;-----------------------------------------
  643 D1:AC10 -  -  -  -  ; Places the Apple on a random empty tile
  644 D1:AC10 -  -  -  -  ; Destroys: All, OP1, OP2, OP3, Data 0-5
  645 D1:AC10 -  -  -  -  ;-----------------------------------------
  646 D1:AC10 -  -  -  -  PlaceApple:
  647 D1:AC10 -  -  -  -  	; Get random index
  648 D1:AC10 CD 08 AD D1 	call randomTile
  649 D1:AC14 22 EA B6 D1 	ld (Data), hl							; Save random index
  650 D1:AC18 -  -  -  -  	
  651 D1:AC18 -  -  -  -  PlaceApple.CheckOverlap.Init:
  652 D1:AC18 -  -  -  -  	; Initialize registers for Snake collision
  653 D1:AC18 DD 21 B6 AE 
              D1 -  -  -  	ld ix, Snake
  654 D1:AC1D ED 4B B3 AE 
              D1 -  -  -  	ld bc, (SnakeLength)
  655 D1:AC22 -  -  -  -  	;inc bc									; Don't. Causes off-by-1 error
  656 D1:AC22 -  -  -  -  PlaceApple.CheckOverlap:
  657 D1:AC22 CD 6C AC D1 	call PlaceApple.GetXY
  658 D1:AC26 0B -  -  -  	dec bc
  659 D1:AC27 -  -  -  -  
  660 D1:AC27 DD 31 00 -  	ld iy, (ix)
  661 D1:AC2A 11 00 00 00 	ld de, 0								; de is 3 bytes, so make sure the high-order byte is 0'd
  662 D1:AC2E FD 56 01 -  	ld d, (iy+SnakeSegment.Pos.X)
  663 D1:AC31 FD 5E 02 -  	ld e, (iy+SnakeSegment.Pos.Y)
  664 D1:AC34 CD 3C 01 02 	call _CpHLDE
  665 D1:AC38 28 18 -  -  	jr z, PlaceApple.CheckOverlap.Overlap
  666 D1:AC3A -  -  -  -  	; Not overlapping
  667 D1:AC3A C5 -  -  -  	push bc
  668 D1:AC3B D1 -  -  -  	pop de
  669 D1:AC3C 21 00 00 00 	ld hl, 0
  670 D1:AC40 CD 3C 01 02 	call _CpHLDE
  671 D1:AC44 2A EA B6 D1 	ld hl, (Data)
  672 D1:AC48 28 13 -  -  	jr z, PlaceApple.IndexFound
  673 D1:AC4A -  -  -  -  	
  674 D1:AC4A DD 23 -  -  	inc ix
  675 D1:AC4C DD 23 -  -  	inc ix
  676 D1:AC4E DD 23 -  -  	inc ix
  677 D1:AC50 18 D0 -  -  	jr PlaceApple.CheckOverlap
  678 D1:AC52 -  -  -  -  PlaceApple.CheckOverlap.Overlap:
  679 D1:AC52 2A EA B6 D1 	ld hl, (Data)
  680 D1:AC56 23 -  -  -  	inc hl
  681 D1:AC57 22 EA B6 D1 	ld (Data), hl
  682 D1:AC5B 18 BB -  -  	jr PlaceApple.CheckOverlap.Init
  683 D1:AC5D -  -  -  -  
  684 D1:AC5D -  -  -  -  PlaceApple.IndexFound:
  685 D1:AC5D CD 6C AC D1 	call PlaceApple.GetXY
  686 D1:AC61 7C -  -  -  	ld a, h
  687 D1:AC62 32 AA AE D1 	ld (ApplePos), a							; Save new apple pos
  688 D1:AC66 7D -  -  -  	ld a, l
  689 D1:AC67 32 AB AE D1 	ld (ApplePos+1), a
  690 D1:AC6B C9 -  -  -  	ret
  691 D1:AC6C -  -  -  -  
  692 D1:AC6C -  -  -  -  ; input - HL - index
  693 D1:AC6C -  -  -  -  ; output - h <- X, l <- Y
  694 D1:AC6C -  -  -  -  ; destroys: a
  695 D1:AC6C -  -  -  -  PlaceApple.GetXY:
  696 D1:AC6C -  -  -  -  	; Get X, Y
  697 D1:AC6C 3E 14 -  -  	ld a, TILEMAP_WIDTH
  698 D1:AC6E CD 90 1D 02 	call _DivHLByA			; hl <- Y, a <- X
  699 D1:AC72 -  -  -  -  	; h <- X, l <- Y
  700 D1:AC72 67 -  -  -  	ld h, a
  701 D1:AC73 C9 -  -  -  	ret
  702 D1:AC74 -  -  -  -  
  703 D1:AC74 -  -  -  -  
  704 D1:AC74 -  -  -  -  
  705 D1:AC74 -  -  -  -  ;---------------------------------------------------------------------------------------
  706 D1:AC74 -  -  -  -  ; **Resets the Snake Segments so that they are a the beginning of the reserved memory**
  707 D1:AC74 -  -  -  -  ; Destroys: All
  708 D1:AC74 -  -  -  -  ;---------------------------------------------------------------------------------------
  709 D1:AC74 -  -  -  -  ResetSegments:
  710 D1:AC74 ED 4B B3 AE 
              D1 -  -  -  	ld bc, (SnakeLength)
  711 D1:AC79 3E 04 -  -  	ld a, SnakeSegment_Size
  712 D1:AC7B CD EF AC D1 	call mul
  713 D1:AC7F -  -  -  -  
  714 D1:AC7F 44 -  -  -  	ld b, h						; ld bc, hl
  715 D1:AC80 4D -  -  -  	ld c, l
  716 D1:AC81 2A B6 AE D1 	ld hl, (Snake)
  717 D1:AC85 11 3A B2 D1 	ld de, Segments
  718 D1:AC89 ED B0 -  -  	ldir						; Move all Segments
  719 D1:AC8B -  -  -  -  	
  720 D1:AC8B 11 03 00 00 	ld de, 3
  721 D1:AC8F DD 21 B6 AE 
              D1 -  -  -  	ld ix, Snake
  722 D1:AC94 01 04 00 00 	ld bc, 4
  723 D1:AC98 FD 21 3A B2 
              D1 -  -  -  	ld iy, Segments
  724 D1:AC9D 2A B3 AE D1 	ld hl, (SnakeLength)
  725 D1:ACA1 -  -  -  -  ResetSegments.PointerLoop:
  726 D1:ACA1 DD 3E 00 -  	ld (ix), iy
  727 D1:ACA4 -  -  -  -  	
  728 D1:ACA4 DD 19 -  -  	add ix, de						; add ix, 3 because 3 is size of pointer/mem addr
  729 D1:ACA6 FD 09 -  -  	add iy, bc						; add bc, 4 because SnakeSegment_Size = 4
  730 D1:ACA8 -  -  -  -  
  731 D1:ACA8 2B -  -  -  	dec hl
  732 D1:ACA9 7C -  -  -  	ld a, h
  733 D1:ACAA A7 -  -  -  	and a
  734 D1:ACAB 20 F4 -  -  	jr nz, ResetSegments.PointerLoop
  735 D1:ACAD 7D -  -  -  	ld a, l
  736 D1:ACAE A7 -  -  -  	and a
  737 D1:ACAF 20 F0 -  -  	jr nz, ResetSegments.PointerLoop
  738 D1:ACB1 C9 -  -  -  	ret
  739 D1:ACB2 -  -  -  -  
  740 D1:ACB2 -  -  -  -  ;---------------------------------------------------
  741 D1:ACB2 -  -  -  -  ; **Moves a given tile into the given render buffer**
  742 D1:ACB2 -  -  -  -  ; Destroys: de, bc
  743 D1:ACB2 -  -  -  -  ; Params:
  744 D1:ACB2 -  -  -  -  ; - HL: Pointer to Tile
  745 D1:ACB2 -  -  -  -  ; - IXL: x pos to place the top left of the tile at
  746 D1:ACB2 -  -  -  -  ; - A: y pos to place the top left of the tile at
  747 D1:ACB2 -  -  -  -  ;---------------------------------------------------
  748 D1:ACB2 -  -  -  -  SetTile:
  749 D1:ACB2 11 00 00 D4 	ld de, LCD_BUFFER
  750 D1:ACB6 -  -  -  -  
  751 D1:ACB6 E5 -  -  -  	push hl												; Save hl
  752 D1:ACB7 DD E5 -  -  	push ix
  753 D1:ACB9 -  -  -  -  
  754 D1:ACB9 01 00 28 00 	ld bc, LCD_WIDTH*TILE_HEIGHT*BYTES_PER_PIXEL
  755 D1:ACBD D5 -  -  -  	push de
  756 D1:ACBE CD EF AC D1 	call mul											; yPos * TILE_HEIGHT * LCD_WIDTH
  757 D1:ACC2 D1 -  -  -  	pop de
  758 D1:ACC3 -  -  -  -  
  759 D1:ACC3 19 -  -  -  	add hl, de											; Add y offset to *RENDER_BUFFER
  760 D1:ACC4 EB -  -  -  	ex de, hl
  761 D1:ACC5 -  -  -  -  	
  762 D1:ACC5 DD E1 -  -  	pop ix
  763 D1:ACC7 DD 7D -  -  	ld a, ixl
  764 D1:ACC9 01 20 00 00 	ld bc, TILE_WIDTH*BYTES_PER_PIXEL
  765 D1:ACCD D5 -  -  -  	push de
  766 D1:ACCE CD EF AC D1 	call mul											; xPos * TILE_WIDTH
  767 D1:ACD2 D1 -  -  -  	pop de
  768 D1:ACD3 -  -  -  -  
  769 D1:ACD3 19 -  -  -  	add hl, de											; Add x offset to *RENDER_BUFFER
  770 D1:ACD4 EB -  -  -  	ex de, hl
  771 D1:ACD5 -  -  -  -  
  772 D1:ACD5 E1 -  -  -  	pop hl												; Restore hl
  773 D1:ACD6 -  -  -  -  
  774 D1:ACD6 3E 10 -  -  	ld a, TILE_HEIGHT
  775 D1:ACD8 -  -  -  -  
  776 D1:ACD8 01 20 00 00 	ld bc, TILE_WIDTH*BYTES_PER_PIXEL
  777 D1:ACDC C5 -  -  -  	push bc
  778 D1:ACDD -  -  -  -  SetTile.loop:
  779 D1:ACDD C1 -  -  -  	pop bc
  780 D1:ACDE C5 -  -  -  	push bc
  781 D1:ACDF -  -  -  -  	; Copy memory
  782 D1:ACDF ED B0 -  -  	ldir												; Copy 1 row of data from tile buffer to RENDER_BUFFER
  783 D1:ACE1 -  -  -  -  
  784 D1:ACE1 -  -  -  -  	; Move down 1 line to the begnning of the Tile
  785 D1:ACE1 E5 -  -  -  	push hl												; Start de += (LCD_WIDTH_SUB_TILE_WIDTH - 1)
  786 D1:ACE2 21 60 02 00 	ld hl, (LCD_WIDTH-TILE_WIDTH)*BYTES_PER_PIXEL		; -1 because the buffers are 0-based
  787 D1:ACE6 19 -  -  -  	add hl, de
  788 D1:ACE7 EB -  -  -  	ex de, hl
  789 D1:ACE8 E1 -  -  -  	pop hl												; End de += (LCD_WIDTH_SUB_TILE_WIDTH - 1)
  790 D1:ACE9 -  -  -  -  
  791 D1:ACE9 3D -  -  -  	dec a
  792 D1:ACEA B7 -  -  -  	or a
  793 D1:ACEB 20 F0 -  -  	jr nz, SetTile.loop
  794 D1:ACED C1 -  -  -  	pop bc
  795 D1:ACEE C9 -  -  -  	ret
  796 D1:ACEF -  -  -  -  
  797 D1:ACEF -  -  -  -  
  798 D1:ACEF -  -  -  -  ;--------------------------------------------------------------
  799 D1:ACEF -  -  -  -  ; **HL = A * BC**
  800 D1:ACEF -  -  -  -  ; Destroys: de, DataEnd 3-0
  801 D1:ACEF -  -  -  -  ; Params:
  802 D1:ACEF -  -  -  -  ;	- A: first number - 8-bit
  803 D1:ACEF -  -  -  -  ;	- BC: second number - 16-bit
  804 D1:ACEF -  -  -  -  ; Output:
  805 D1:ACEF -  -  -  -  ;	- HL: result - 24-bit
  806 D1:ACEF -  -  -  -  ;--------------------------------------------------------------
  807 D1:ACEF -  -  -  -  mul:
  808 D1:ACEF 61 -  -  -  	ld h, c
  809 D1:ACF0 6F -  -  -  	ld l, a
  810 D1:ACF1 ED 6C -  -  	mlt hl
  811 D1:ACF3 -  -  -  -  
  812 D1:ACF3 50 -  -  -  	ld d, b
  813 D1:ACF4 5F -  -  -  	ld e, a
  814 D1:ACF5 ED 5C -  -  	mlt de
  815 D1:ACF7 AF -  -  -  	xor a
  816 D1:ACF8 32 26 B7 D1 	ld (DataEnd-4), a
  817 D1:ACFC ED 53 27 B7 
              D1 -  -  -  	ld (DataEnd-3), de			; shl 8
  818 D1:AD01 ED 5B 26 B7 
              D1 -  -  -  	ld de, (DataEnd-4)
  819 D1:AD06 -  -  -  -  
  820 D1:AD06 19 -  -  -  	add hl, de
  821 D1:AD07 C9 -  -  -  	ret
  822 D1:AD08 -  -  -  -  
  823 D1:AD08 -  -  -  -  
  824 D1:AD08 -  -  -  -  
  825 D1:AD08 -  -  -  -  ;---------------------------------
  826 D1:AD08 -  -  -  -  ; **Generates a random intager between HL and DE**
  827 D1:AD08 -  -  -  -  ; Destroys: hl, de, af, ix, bc, Data 0-12
  828 D1:AD08 -  -  -  -  ; Outputs:
  829 D1:AD08 -  -  -  -  ;	- HL: Result - 16-bit
  830 D1:AD08 -  -  -  -  ;---------------------------------
  831 D1:AD08 -  -  -  -  randomTile:
  832 D1:AD08 -  -  -  -  	; Reset Data
  833 D1:AD08 21 00 00 00 	ld hl, 0
  834 D1:AD0C 22 EA B6 D1 	ld (Data), hl
  835 D1:AD10 22 ED B6 D1 	ld (Data+3), hl
  836 D1:AD14 22 F0 B6 D1 	ld (Data+6), hl
  837 D1:AD18 22 F3 B6 D1 	ld (Data+9), hl
  838 D1:AD1C CD 66 AD D1 	call xorshift
  839 D1:AD20 -  -  -  -  
  840 D1:AD20 -  -  -  -  	; Normalize
  841 D1:AD20 22 EA B6 D1 	ld (Data), hl
  842 D1:AD24 DD 21 EA B6 
              D1 -  -  -  	ld ix, Data
  843 D1:AD29 -  -  -  -  
  844 D1:AD29 -  -  -  -  	; Multiply by 300(012Ch)
  845 D1:AD29 26 2C -  -  	ld h, 2Ch
  846 D1:AD2B ED 6C -  -  	mlt hl
  847 D1:AD2D DD 2F 03 -  	ld (ix+3), hl
  848 D1:AD30 -  -  -  -  	
  849 D1:AD30 2A EA B6 D1 	ld hl, (Data)
  850 D1:AD34 2E 2C -  -  	ld l, 2Ch
  851 D1:AD36 ED 6C -  -  	mlt hl
  852 D1:AD38 DD 2F 07 -  	ld (ix+7), hl
  853 D1:AD3B -  -  -  -  
  854 D1:AD3B -  -  -  -  
  855 D1:AD3B -  -  -  -  	; here, would just need to multiply by 1 and shift 8
  856 D1:AD3B 2A EA B6 D1 	ld hl, (Data)
  857 D1:AD3F DD 2F 0A -  	ld (ix+10), hl
  858 D1:AD42 -  -  -  -  
  859 D1:AD42 2A ED B6 D1 	ld hl, (Data+3)
  860 D1:AD46 ED 5B F0 B6 
              D1 -  -  -  	ld de, (Data+6)
  861 D1:AD4B 19 -  -  -  	add hl, de
  862 D1:AD4C ED 5B F3 B6 
              D1 -  -  -  	ld de, (Data+9)
  863 D1:AD51 19 -  -  -  	add hl, de
  864 D1:AD52 -  -  -  -  
  865 D1:AD52 DD 2F 00 -  	ld (ix), hl
  866 D1:AD55 01 00 00 00 	ld bc, 0
  867 D1:AD59 DD 0F 03 -  	ld (ix+3), bc
  868 D1:AD5C 30 04 -  -  	jr nc, randomTile.NoCarry
  869 D1:AD5E DD 36 03 01 	ld (ix+3), 1
  870 D1:AD62 -  -  -  -  
  871 D1:AD62 -  -  -  -  randomTile.NoCarry:
  872 D1:AD62 DD 27 02 -  	ld hl, (ix+2)
  873 D1:AD65 C9 -  -  -  	ret
  874 D1:AD66 -  -  -  -  
  875 D1:AD66 -  -  -  -  
  876 D1:AD66 -  -  -  -  
  877 D1:AD66 -  -  -  -  ;----------------------------------
  878 D1:AD66 -  -  -  -  ; Uses the Xorshift PRNG algorithm
  879 D1:AD66 -  -  -  -  ; Destroys: af, bc, de
  880 D1:AD66 -  -  -  -  ; Output: hl, RNGSeed
  881 D1:AD66 -  -  -  -  ;----------------------------------
  882 D1:AD66 -  -  -  -  xorshift:
  883 D1:AD66 ED 4B A6 AE 
              D1 -  -  -  	ld bc, (RNGSeed)
  884 D1:AD6B 50 -  -  -  	ld d, b								; ld de, bc
  885 D1:AD6C 59 -  -  -  	ld e, c
  886 D1:AD6D 3E 07 -  -  	ld a, 7
  887 D1:AD6F CD 99 AD D1 	call xorshift.shl
  888 D1:AD73 CD AD AD D1 	call xorshift.xor
  889 D1:AD77 -  -  -  -  
  890 D1:AD77 50 -  -  -  	ld d, b								; ld de, bc
  891 D1:AD78 59 -  -  -  	ld e, c
  892 D1:AD79 3E 09 -  -  	ld a, 9
  893 D1:AD7B CD A3 AD D1 	call xorshift.shr
  894 D1:AD7F CD AD AD D1 	call xorshift.xor
  895 D1:AD83 -  -  -  -  
  896 D1:AD83 50 -  -  -  	ld d, b								; ld de, bc
  897 D1:AD84 59 -  -  -  	ld e, c
  898 D1:AD85 3E 08 -  -  	ld a, 8
  899 D1:AD87 CD 99 AD D1 	call xorshift.shl
  900 D1:AD8B CD AD AD D1 	call xorshift.xor
  901 D1:AD8F -  -  -  -  
  902 D1:AD8F 21 37 9E 00 	ld hl, 009E37h
  903 D1:AD93 19 -  -  -  	add hl, de
  904 D1:AD94 -  -  -  -  
  905 D1:AD94 22 A6 AE D1 	ld (RNGSeed), hl
  906 D1:AD98 C9 -  -  -  	ret
  907 D1:AD99 -  -  -  -  
  908 D1:AD99 -  -  -  -  
  909 D1:AD99 -  -  -  -  xorshift.shl:
  910 D1:AD99 CB 23 -  -  	sla e
  911 D1:AD9B CB 12 -  -  	rl d
  912 D1:AD9D 3D -  -  -  	dec a
  913 D1:AD9E -  -  -  -  
  914 D1:AD9E FE FF -  -  	cp 0FFh
  915 D1:ADA0 20 F7 -  -  	jr nz, xorshift.shl
  916 D1:ADA2 C9 -  -  -  	ret
  917 D1:ADA3 -  -  -  -  xorshift.shr:
  918 D1:ADA3 CB 3A -  -  	srl d
  919 D1:ADA5 CB 1B -  -  	rr e
  920 D1:ADA7 3D -  -  -  	dec a
  921 D1:ADA8 -  -  -  -  
  922 D1:ADA8 FE FF -  -  	cp 0FFh
  923 D1:ADAA 20 F7 -  -  	jr nz, xorshift.shr
  924 D1:ADAC C9 -  -  -  	ret
  925 D1:ADAD -  -  -  -  
  926 D1:ADAD -  -  -  -  xorshift.xor:
  927 D1:ADAD -  -  -  -  	; Xor upper byte
  928 D1:ADAD 7A -  -  -  	ld a, d
  929 D1:ADAE A8 -  -  -  	xor b
  930 D1:ADAF 57 -  -  -  	ld d, a
  931 D1:ADB0 -  -  -  -  	; xor lower byte
  932 D1:ADB0 7B -  -  -  	ld a, e
  933 D1:ADB1 A9 -  -  -  	xor c
  934 D1:ADB2 5F -  -  -  	ld e, a
  935 D1:ADB3 C9 -  -  -  	ret
  936 D1:ADB4 -  -  -  -  
  937 D1:ADB4 -  -  -  -  
  938 D1:ADB4 -  -  -  -  
  939 D1:ADB4 -  -  -  -  
  940 D1:ADB4 -  -  -  -  
  941 D1:ADB4 -  -  -  -  
  942 D1:ADB4 -  -  -  -  
  943 D1:ADB4 -  -  -  -  
  944 D1:ADB4 -  -  -  -  
  945 D1:ADB4 -  -  -  -  ;--------------
  946 D1:ADB4 -  -  -  -  ; Vars
  947 D1:ADB4 -  -  -  -  ;--------------
  948 D1:ADB4 -  -  -  -  
  949 D1:ADB4 -  -  -  -  ExitPrgm:
  950 D1:ADB4 00 -  -  -  	.db 0
  951 D1:ADB5 -  -  -  -  
  952 D1:ADB5 -  -  -  -  
  953 D1:ADB5 -  -  -  -  
  954 D1:ADB5 -  -  -  -  ; Error Messages
  955 D1:ADB5 -  -  -  -  ErrorAppVarArchivedStr:
  956 D1:ADB5 45 52 52 4F 
              52 2C 20 41 
              70 70 56 61 
              72 20 69 73 
              20 61 72 63 
              68 69 76 65 
              64 2C 20 70 
              6C 65 61 73 
              65 20 6D 6F 
              76 65 20 69 
              74 20 69 6E 
              74 6F 20 52 
              41 4D 00 -  	.db "ERROR, AppVar is archived, please move it into RAM", 0
  957 D1:ADE8 -  -  -  -  ErrorAppVarNotFoundStr:
  958 D1:ADE8 45 52 52 4F 
              52 2C 20 41 
              70 70 56 61 
              72 20 6E 6F 
              74 20 66 6F 
              75 6E 64 00 	.db "ERROR, AppVar not found", 0
  959 D1:AE00 -  -  -  -  ErrorInvalidDirectionStr:
  960 D1:AE00 45 52 52 4F 
              52 2C 20 54 
              68 65 20 63 
              75 72 72 65 
              6E 74 20 6D 
              6F 76 65 6D 
              65 6E 74 20 
              64 69 72 65 
              63 74 69 6F 
              6E 20 68 61 
              73 20 62 65 
              65 6E 20 73 
              65 74 20 74 
              6F 20 61 6E 
              20 69 6E 76 
              61 6C 69 64 
              20 76 61 6C 
              75 65 00 -  	.db "ERROR, The current movement direction has been set to an invalid value", 0
  961 D1:AE47 -  -  -  -  ErrorCantFindApplePosStr:
  962 D1:AE47 45 52 52 4F 
              52 2C 20 54 
              68 65 20 63 
              75 72 72 65 
              6E 74 20 6D 
              6F 76 65 6D 
              65 6E 74 20 
              64 69 72 65 
              63 74 69 6F 
              6E 20 68 61 
              73 20 62 65 
              65 6E 20 73 
              65 74 20 74 
              6F 20 61 6E 
              20 69 6E 76 
              61 6C 69 64 
              20 76 61 6C 
              75 65 00 -  	.db "ERROR, The current movement direction has been set to an invalid value", 0
  963 D1:AE8E -  -  -  -  YouDiedStr:
  964 D1:AE8E 59 6F 75 20 
              44 69 65 64 
              00 -  -  -  	.db "You Died", 0
  965 D1:AE97 -  -  -  -  
  966 D1:AE97 -  -  -  -  
  967 D1:AE97 -  -  -  -  
  968 D1:AE97 -  -  -  -  ; AppVar
  969 D1:AE97 -  -  -  -  
  970 D1:AE97 -  -  -  -  AppVarName:
  971 D1:AE97 -  -  -  -  	; "VARNAME", 0 (0-padded to 8 bytes), 15h
  972 D1:AE97 15 53 4E 4B 
              53 4B 4E 00 
              00 00 00 -  	.db AppVarObj, "SNKSKN", 0, 0, 0, 0
  973 D1:AEA2 -  -  -  -  AppVarPointer:
  974 D1:AEA2 00 00 00 -  	.fill 3, 0
  975 D1:AEA5 -  -  -  -  
  976 D1:AEA5 -  -  -  -  
  977 D1:AEA5 -  -  -  -  
  978 D1:AEA5 -  -  -  -  ; Timer
  979 D1:AEA5 -  -  -  -  
  980 D1:AEA5 -  -  -  -  PreviousTime:
  981 D1:AEA5 FF -  -  -  	.db 0FFh
  982 D1:AEA6 -  -  -  -  
  983 D1:AEA6 -  -  -  -  RNGSeed:
  984 D1:AEA6 02 DD 00 -  	.dl 00DD02h			; Random number from the google RNG
  985 D1:AEA9 -  -  -  -  ReplaceApple:
  986 D1:AEA9 00 -  -  -  	.db 0
  987 D1:AEAA -  -  -  -  ApplePos:
  988 D1:AEAA 00 -  -  -  	.db 0	; X
  989 D1:AEAB 00 -  -  -  	.db 0	; Y
  990 D1:AEAC 00 -  -  -  	.db 0	; Padding
  991 D1:AEAD -  -  -  -  ; Snake
  992 D1:AEAD -  -  -  -  SnakeFacing:
  993 D1:AEAD 08 00 00 -  	.dl Facing.Right
  994 D1:AEB0 -  -  -  -  SnakeFacingPrevious:
  995 D1:AEB0 08 00 00 -  	.dl Facing.Right
  996 D1:AEB3 -  -  -  -  SnakeLength:
  997 D1:AEB3 -  -  -  -  	; Little Endian
  998 D1:AEB3 09 00 00 -  	.db 9, 0, 0
  999 D1:AEB6 -  -  -  -  Snake:
 1000 D1:AEB6 -  -  -  -  	; db - 1 byte, dw - 2 bytes, dl - 3 bytes
 1001 D1:AEB6 3A B2 D1 -  	.dl Segments+(0*SnakeSegment_Size)
 1002 D1:AEB9 3E B2 D1 -  	.dl Segments+(1*SnakeSegment_Size)
 1003 D1:AEBC 42 B2 D1 -  	.dl Segments+(2*SnakeSegment_Size)
 1004 D1:AEBF 46 B2 D1 -  	.dl Segments+(3*SnakeSegment_Size)
 1005 D1:AEC2 4A B2 D1 -  	.dl Segments+(4*SnakeSegment_Size)
 1006 D1:AEC5 4E B2 D1 -  	.dl Segments+(5*SnakeSegment_Size)
 1007 D1:AEC8 52 B2 D1 -  	.dl Segments+(6*SnakeSegment_Size)
 1008 D1:AECB 56 B2 D1 -  	.dl Segments+(7*SnakeSegment_Size)
 1009 D1:AECE 5A B2 D1 -  	.dl Segments+(8*SnakeSegment_Size)
 1010 D1:AED1 -  -  -  -  
 1011 D1:AED1 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 -  -  -  	.fill 3*(TILEMAP_AREA - 9), 0							; *SnakeSegment[LCD_AREA]
 1012 D1:B23A -  -  -  -  Segments:
 1013 D1:B23A -  -  -  -  	; Facing, Pos.X, Pos.Y, Type
 1014 D1:B23A 08 00 0E 02 	.db Facing.Right, 0, TILEMAP_HEIGHT-1, Type.Tail
 1015 D1:B23E 08 01 0E 01 	.db Facing.Right, 1, TILEMAP_HEIGHT-1, Type.Body
 1016 D1:B242 08 02 0E 01 	.db Facing.Right, 2, TILEMAP_HEIGHT-1, Type.Body
 1017 D1:B246 08 03 0E 01 	.db Facing.Right, 3, TILEMAP_HEIGHT-1, Type.Body
 1018 D1:B24A 08 04 0E 01 	.db Facing.Right, 4, TILEMAP_HEIGHT-1, Type.Body
 1019 D1:B24E 08 05 0E 01 	.db Facing.Right, 5, TILEMAP_HEIGHT-1, Type.Body
 1020 D1:B252 08 06 0E 01 	.db Facing.Right, 6, TILEMAP_HEIGHT-1, Type.Body
 1021 D1:B256 08 07 0E 01 	.db Facing.Right, 7, TILEMAP_HEIGHT-1, Type.Body
 1022 D1:B25A -  -  -  -  
 1023 D1:B25A -  -  -  -  	; Snake Render Check
 1024 D1:B25A -  -  -  -  	; .db Facing.Up, 8, TILEMAP_HEIGHT-1, Type.Body
 1025 D1:B25A -  -  -  -  	; .db Facing.Up, 8, TILEMAP_HEIGHT-2, Type.Body
 1026 D1:B25A -  -  -  -  	; .db Facing.Up, 8, TILEMAP_HEIGHT-3, Type.Body
 1027 D1:B25A -  -  -  -  	; .db Facing.Left, 8, TILEMAP_HEIGHT-4, Type.Body
 1028 D1:B25A -  -  -  -  	
 1029 D1:B25A -  -  -  -  	; .db Facing.Left, 7, TILEMAP_HEIGHT-4, Type.Body
 1030 D1:B25A -  -  -  -  	; .db Facing.Left, 6, TILEMAP_HEIGHT-4, Type.Body
 1031 D1:B25A -  -  -  -  	; .db Facing.Down, 5, TILEMAP_HEIGHT-4, Type.Body
 1032 D1:B25A -  -  -  -  
 1033 D1:B25A -  -  -  -  	; .db Facing.Down, 5, TILEMAP_HEIGHT-3, Type.Body
 1034 D1:B25A -  -  -  -  	; .db Facing.Right, 5, TILEMAP_HEIGHT-2, Type.Body
 1035 D1:B25A -  -  -  -  
 1036 D1:B25A -  -  -  -  	; .db Facing.Up, 6, TILEMAP_HEIGHT-2, Type.Body
 1037 D1:B25A -  -  -  -  	; .db Facing.Right, 6, TILEMAP_HEIGHT-3, Type.Body
 1038 D1:B25A -  -  -  -  	; .db Facing.Down, 7, TILEMAP_HEIGHT-3, Type.Body
 1039 D1:B25A -  -  -  -  
 1040 D1:B25A -  -  -  -  
 1041 D1:B25A 08 08 0E 00 	.db Facing.Right, 8, TILEMAP_HEIGHT-1, Type.Head
 1042 D1:B25E -  -  -  -  	; -10 because 9 pre-defined segments, and 1 segment after "SegmentsEnd"
 1043 D1:B25E 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 	.fill SnakeSegment_Size*(TILEMAP_AREA - 10)				; SnakeSegment[TILEMAP_AREA]
 1044 D1:B6E6 -  -  -  -  SegmentsEnd:
 1045 D1:B6E6 00 00 00 00 	.fill SnakeSegment_Size
 1046 D1:B6EA -  -  -  -  
 1047 D1:B6EA -  -  -  -  ; Extra memory for short-term storage
 1048 D1:B6EA -  -  -  -  Data:
 1049 D1:B6EA 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 	.fill 64, 0
 1050 D1:B72A -  -  -  -  DataEnd:
